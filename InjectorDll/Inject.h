// Inject.h


#pragma once

#define ERROR_SUCCESS				0x00000000
#define ERROR_INVALID_PROC_HANDLE	0x00000001
#define ERROR_FILE_DOESNT_EXIST		0x00000002
#define ERROR_OUT_OF_MEMORY			0x00000003
#define ERROR_INVALID_FILE			0x00000004
#define ERROR_NO_X64FILE			0x00000005
#define ERROR_NO_X86FILE			0x00000006
#define ERROR_IMAGE_CANT_RELOC		0x00000007
#define ERROR_NTDLL_MISSING			0x00000008
#define ERROR_LDRLOADDLL_MISSING	0x00000009
#define ERROR_LDRPLOADDLL_MISSING	0x0000000A
#define ERROR_INVALID_FLAGS			0x0000000B
#define ERROR_CANT_FIND_MOD			0x0000000C
#define ERROR_CANT_FIND_MOD_PEB		0x0000000D

#define ERROR_UNKNOWN				0x80000000
#define ERROR_CANT_CREATE_THREAD	0x80000001
#define ERROR_CANT_ALLOC_MEM		0x80000002
#define ERROR_WPM_FAIL				0x80000003
#define ERROR_TH32_FAIL				0x80000004
#define ERROR_CANT_GET_PEB			0x80000005
#define ERROR_CANT_ACCESS_PEB		0x80000006
#define ERROR_CANT_ACCESS_PEB_LDR	0x80000007
#define ERROR_CHECK_WIN32_ERROR		0x80000008
#define ERROR_VPE_FAIL				0x80000009
#define ERROR_INVALID_ARGC			0x8000000A
#define ERROR_SET_PRIV_FAIL			0x8000000B
#define ERROR_CANT_OPEN_PROCESS		0x8000000C
#define ERROR_CANT_START_X64_INJ	0x8000000D
#define ERROR_INVALID_PID			0x8000000E

#define ERROR_ADV_UNKNOWN			0x00000000
#define ERROR_ADV_INV_PROC			0x00000001
#define ERROR_ADV_TH32_FAIL			0x00000002
#define ERROR_ADV_NO_THREADS		0x00000003
#define ERROR_ADV_CANT_OPEN_THREAD	0x00000004
#define ERROR_ADV_SUSPEND_FAIL		0x00000005
#define ERROR_ADV_GET_CONTEXT_FAIL	0x00000006
#define ERROR_ADV_OUT_OF_MEMORY		0x00000007
#define ERROR_ADV_WPM_FAIL			0x00000008
#define ERROR_ADV_SET_CONTEXT_FAIL	0x00000009
#define ERROR_ADV_RESUME_FAIL		0x0000000A
#define ERROR_ADV_QIP_MISSING		0x0000000B
#define ERROR_ADV_QIP_FAIL			0x0000000C
#define ERROR_ADV_CANT_FIND_MODULE	0x0000000D

#define ERASE_HEADER				1
#define FAKE_HEADER					2
#define UNLINK_FROM_PEB				4
#define ALL_FLAGS (ERASE_HEADER | FAKE_HEADER | UNLINK_FROM_PEB)

#define MEMORY_PERMISSIONS (MEM_COMMIT | MEM_RESERVE)

// Entry Point
DWORD Inject(
	unsigned char * source, 
	UINT size, 
	HANDLE hProcess, 
	bool bUseExistingThread = false, 
	DWORD dwPostinjection = 0, 
	DWORD *dwErrorCode = nullptr);